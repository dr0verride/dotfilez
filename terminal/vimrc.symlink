" First load plugins
call plug#begin()
Plug 'tpope/vim-sensible'
if $TOTAL_CONTROL == 'true'
  Plug 'wincent/Command-T'
else
  Plug 'kien/ctrlp.vim'
endif
Plug 'scrooloose/syntastic'
Plug 'rking/ag.vim'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Plug 'fholgado/minibufexpl.vim'
Plug 'zefei/vim-wintabs'

" Syntax highighting 
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }


" Probably good.
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'


" Futures?
" https://github.com/ervandew/supertab
" https://github.com/Valloric/YouCompleteMe
" https://github.com/bling/vim-airline
" https://github.com/tpope/vim-fugitive
" https://github.com/sjl/gundo.vim
" https://github.com/tmhedberg/matchit
" https://github.com/Lokaltog/vim-easymotion
" https://github.com/garbas/vim-snipmate
" https://github.com/tpope/vim-rails
" https://github.com/tpope/vim-commentary
" https://github.com/tpope/vim-repeat


" Themes
" https://github.com/chriskempson/base16
call plug#end()
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
set hidden


" Nerd Tree
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

syntax on
colorscheme flatland
set expandtab
set backspace=indent,eol,start
set autoindent
set copyindent
set shiftwidth=2
set tabstop=2
set nowrap
set shiftround
set number
set ignorecase
set smartcase
set smarttab
set hlsearch
set incsearch
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak,*.dump,*.dmp,*.class
set visualbell
set noerrorbells

set nobackup
set noswapfile
set splitbelow
set splitright

"Support clipboard
if $TMUX == ''
    set clipboard+=unnamed
endif

" Leader Keys
let mapleader=" "
nnoremap <Space> <Nop>
noremap <C-e> <esc>
cmap <C-e> <C-c>

nnoremap <Leader>` :so $MYVIMRC<CR>
nnoremap <Leader>\ :NERDTreeToggle<CR>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
map <C-s> :w<CR>

" Wintabs
map <C-h> <Plug>(wintabs_previous)
map <C-l> <Plug>(wintabs_next)
map <C-T>c <Plug>(wintabs_close)
map <C-T>o <Plug>(wintabs_only)
map <C-W>c <Plug>(wintabs_close_window)
map <C-W>o <Plug>(wintabs_only_window)
command! Tabc WintabsCloseVimtab
command! Tabo WintabsOnlyVimtab
let g:wintabs_autoclose = 0

" MinBufExpl
" map <Leader>a :bprev<CR>
" map <Leader>r :bnext<CR>

if $TOTAL_CONTROL == 'true'
  " Nothing
else
  let g:ctrlp_map = '<Leader>t'
  nnoremap <Leader>b :CtrlPBuffer<CR>
  let g:ctrlp_show_hidden = 1
endif

" autocmd vimenter * MBEOpen
" let g:miniBufExplBuffersNeeded = 1
" let g:miniBufExplBRSplit = 0

" Remove trailing white space
autocmd BufWritePre * :%s/\s\+$//e

