" First load plugins
call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
" Plug 'mileszs/ack.vim'
" Plug 'stephpy/vim-yaml', { 'for': 'yaml' }
" Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'godlygeek/tabular'
Plug 'sheerun/vim-polyglot'
"Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'vimwiki'] }
" Plug '2072/PHP-Indenting-for-VIm', { 'for': 'php' }
"Plug 'airblade/vim-gitgutter'
" Plug 'jiangmiao/auto-pairs'
" Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

" Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ton/vim-bufsurf'

" Plug 'zefei/vim-wintabs'

" Syntax highighting

" PHP
" Plug 'jwalton512/vim-blade', { 'for': 'php' }
" Plug 'StanAngeloff/php.vim', { 'for': 'php' }

" Elixir
" Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }

" Kotlin
" Plug 'udalov/kotlin-vim', { 'for': 'kotlin' }

"Plug 'groenewege/vim-less', { 'for': 'less' }
" Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Plug 'rhysd/vim-crystal'
" Plug 'mxw/vim-jsx'
"Plug 'slim-template/vim-slim'
"Plug 'posva/vim-vue'
" Plug 'cakebaker/scss-syntax.vim'
" Plug 'digitaltoad/vim-pug'
" Plug 'tpope/vim-projectionist'
" Plug 'tpope/vim-rake', { 'for': 'ruby' }
" Plug 'lambdatoast/elm.vim'
" Plug 'jdonaldson/vaxe'
" Plug 'JesseKPhillips/d.vim', { 'for': 'd' }
" Plug 'ElmCast/elm-vim'
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-lua-ftplugin'
" Plug 'quabug/vim-gdscript'

" Probably good.
" Plug 'Raimondi/delimitMate'
" Plug 'tpope/vim-liquid'

" Tmux ease
" Plug 'benmills/vimux'

" Fancy
"Plug 'Valloric/YouCompleteMe'
" Plug 'reedes/vim-pencil', { 'for': ['markdown', 'text'] }
" Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'text'] }
" Plug 'junegunn/limelight.vim', { 'for': ['text', 'markdown'] }

" Snippets
" Plug 'sirver/ultisnips'
" Plug 'honza/vim-snippets'

" Futures?
" https://github.com/ervandew/supertab
" https://github.com/tpope/vim-fugitive
" https://github.com/sjl/gundo.vim
" https://github.com/tmhedberg/matchit
" https://github.com/Lokaltog/vim-easymotion
" https://github.com/tpope/vim-rails
" https://github.com/tpope/vim-commentary
" vim-dict


" Themes
" https://github.com/chriskempson/base16

call plug#end()

filetype plugin indent on

" Nerd Tree
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1

augroup nerdtree
  " Close Nerd Tree when opening file
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END

filetype plugin on
syntax on
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set nocompatible
set termguicolors
"colorscheme flatland
colorscheme gruvbox
set expandtab
set backspace=indent,eol,start
set autoindent
set shiftwidth=2
set tabstop=2
set shiftround
" set number
set number relativenumber
set nu rnu
" set relativenumber
set ignorecase
set smartcase
set smarttab
set hlsearch
set incsearch
set history=10000
set undolevels=10000
set wildignore=*.swp,*.bak,*.dump,*.dmp,*.class
set visualbell
set noerrorbells
set hidden
set nowrap
set scroll=0

" Load Local vimrc files locally
set exrc
set secure

set nobackup
set noswapfile
set splitbelow
set splitright
set foldenable
set foldmethod=syntax
set foldlevelstart=20
let php_folding=1
let php_phpdoc_folding=1

autocmd FileType python setlocal foldenable foldmethod=syntax
autocmd FileType php setlocal foldenable foldmethod=syntax

:noremap <silent> <leader>/ :noh<CR>


"Support clipboard
if has('mac')
  let g:clipboard = {'copy': {'+': 'pbcopy', '*': 'pbcopy'}, 'paste': {'+': 'pbpaste', '*': 'pbpaste'}, 'name': 'pbcopy', 'cache_enabled': 0}
endif
set clipboard+=unnamedplus

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Leader Keys
let mapleader=" "
nnoremap <Space> <Nop>
inoremap ,, <esc>

nnoremap <Leader>` :so $MYVIMRC<CR>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <silent> <C-n> :NERDTreeToggle<CR>
nnoremap <silent> <Leader>\ :NERDTreeToggle<CR>




" FZF
"""""""""""""""""""""""""

" Mapping selecting mappings

" All files
nmap <silent> <leader>t :Files<cr>
" Files in version control.
nmap <silent> <leader>p :GFiles<cr>
" Search open buffers
nmap <silent> <leader>b :Buffers<cr>
" Search changed files in git
nmap <silent> <leader>g :GFiles?<cr>

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
" imap <c-x><c-f> <plug>(fzf-complete-path)
" imap <c-x><c-j> <plug>(fzf-complete-file-ag)
" imap <c-x><c-l> <plug>(fzf-complete-line)

" Buff Surf
nnoremap <silent> <leader>[ :BufSurfBack<cr>
nnoremap <silent> <leader>] :BufSurfForward<cr>

"command! CloseHiddenBuffers call s:CloseHiddenBuffers()
"function! s:CloseHiddenBuffers()
"  let open_buffers = []
"
"  for i in range(tabpagenr('$'))
"    call extend(open_buffers, tabpagebuflist(i + 1))
"  endfor
"
"  for num in range(1, bufnr("$") + 1)
"    if buflisted(num) && index(open_buffers, num) == -1
"      exec "bdelete ".num
"    endif
"  endfor
"endfunction

" let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
" augroup pencil
"   autocmd!
"   autocmd FileType markdown,mkd call pencil#init()
"   autocmd FileType text         call pencil#init()
"   autocmd! User GoyoEnter Limelight
"   autocmd! User GoyoLeave Limelight!
"   autocmd BufNewFile,BufRead *.md Goyo
" augroup END
" let g:goyo_width=120

" Command-T
"let g:CommandTCancelMap='<C-e>'

" autocmd BufNewFile,BufRead *.slim setlocal filetype=slim

" Lua
let g:lua_complete_keywords = 0
let g:lua_complete_globals = 0
let g:lua_complete_library = 0
let g:lua_complete_dynamic = 0

" GUi
set guioptions-=m  "menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar"
set guifont=Anonymous\ Pro:h18 "font"
set background=dark "dark background"


" If the current buffer has never been saved, it will have no name,
" call the file browser to save it, otherwise just save it.
command! -nargs=0 -bar Update if &modified
                           \|    if empty(bufname('%'))
                           \|        browse confirm write
                           \|    else
                           \|        confirm write
                           \|    endif
                           \|endif


" Use CTRL-S for saving, also in Insert mode
noremap <C-S> :Update<CR>

vnoremap <C-S> <C-C>:Update<CR>
inoremap <C-S> <C-O>:Update<CR><ESC>

" ALE
" fix files on save
let g:ale_fix_on_save = 1

" lint after 1000ms after changes are made both on insert mode and normal mode
let g:ale_lint_on_text_changed = 'always'
let g:ale_lint_delay = 1000

" use nice symbols for errors and warnings
let g:ale_sign_error = '✗ '
let g:ale_sign_warning = '⚠ '

" fixer configurations
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

"Vim Wiki
"let g:vimwiki_list = [{'path': '~/vimwiki', 'template_path': '~/vimwiki/templates/',
"          \ 'template_default': 'default', 'syntax': 'markdown', 'ext': '.md',
"          \ 'nested_syntaxes': {'php': 'php', 'ruby': 'ruby', 'elixir': 'elixir', 'python': 'python'},
"          \ 'path_html': '~/vimwiki/site_html/', 'custom_wiki2html': 'vimwiki_markdown',
"          \ 'template_ext': '.tpl'}]

" Put at the very end of your .vimrc file.
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" Markdown
let g:vim_markdown_folding_disabled = 1
