" First load plugins
call plug#begin()
Plug 'tpope/vim-sensible'
"if $TOTAL_CONTROL == 'true'
"  Plug 'wincent/Command-T'
"else
Plug 'ctrlpvim/ctrlp.vim'
"endif
Plug 'scrooloose/syntastic'
Plug 'rking/ag.vim'
Plug 'stephpy/vim-yaml'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" Plug 'fholgado/minibufexpl.vim'
Plug 'zefei/vim-wintabs'

" Syntax highighting

" Elixir
Plug 'elixir-lang/vim-elixir'

"Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'rhysd/vim-crystal'
" Plug 'mxw/vim-jsx'
Plug 'slim-template/vim-slim'
Plug 'posva/vim-vue'
Plug 'cakebaker/scss-syntax.vim'
Plug 'digitaltoad/vim-pug'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rake', { 'for': 'ruby' }
" Plug 'lambdatoast/elm.vim'
Plug 'jdonaldson/vaxe'
" Plug 'JesseKPhillips/d.vim', { 'for': 'd' }
Plug 'xolox/vim-misc'
" Plug 'xolox/vim-lua-ftplugin'
" Plug 'quabug/vim-gdscript'

" Probably good.
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

" Tmux ease
" Plug 'benmills/vimux'

" Fancy
"Plug 'Valloric/YouCompleteMe'
Plug 'reedes/vim-pencil', { 'for': ['markdown', 'text'] }
Plug 'junegunn/goyo.vim', { 'for': ['markdown', 'text'] }
Plug 'junegunn/limelight.vim', { 'for': ['text', 'markdown'] }


" Futures?
" https://github.com/ervandew/supertab
" https://github.com/bling/vim-airline
" https://github.com/tpope/vim-fugitive
" https://github.com/sjl/gundo.vim
" https://github.com/tmhedberg/matchit
" https://github.com/Lokaltog/vim-easymotion
" https://github.com/garbas/vim-snipmate
" https://github.com/tpope/vim-rails
" https://github.com/tpope/vim-commentary
" vim-dict


" Themes
" https://github.com/chriskempson/base16
call plug#end()



" Nerd Tree
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

syntax on
colorscheme flatland
set expandtab
set backspace=indent,eol,start
set autoindent
set shiftwidth=2
set tabstop=2
set shiftround
set number
set ignorecase
set smartcase
set smarttab
set hlsearch
set incsearch
set history=1000
set undolevels=1000
set wildignore=*.swp,*.bak,*.dump,*.dmp,*.class
set visualbell
set noerrorbells
set hidden
set nowrap
set scroll=0

set nobackup
set noswapfile
set splitbelow
set splitright
set nofoldenable

"Support clipboard
if $TMUX == ''
    set clipboard+=unnamed
endif

nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode

" Leader Keys
let mapleader=" "
nnoremap <Space> <Nop>
inoremap <C-e> <esc>
nnoremap <C-e> <esc>
vnoremap <C-e> <esc>
cmap <C-e> <C-c>

nnoremap <Leader>` :so $MYVIMRC<CR>
nnoremap <Leader>\ :NERDTreeToggle<CR>
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l
map <C-s> :w<CR>

" Wintabs
map <C-h> <Plug>(wintabs_previous)
map <C-l> <Plug>(wintabs_next)
map <C-T>c <Plug>(wintabs_close)
map <C-T>o <Plug>(wintabs_only)
map <C-W>c <Plug>(wintabs_close_window)
map <C-W>o <Plug>(wintabs_only_window)
command! Tabc WintabsCloseVimtab
command! Tabo WintabsOnlyVimtab
let g:wintabs_autoclose = 0

" MinBufExpl
" map <Leader>a :bprev<CR>
" map <Leader>r :bnext<CR>

let g:ctrlp_map = '<Leader>t'
let g:ctrlp_custom_ignore = {
      \ 'dir': '\v[\/](\.git|\.hg|node_modules|_build|deps)$'
      \ }
nnoremap <Leader>b :CtrlPBuffer<CR>

" autocmd vimenter * MBEOpen
" let g:miniBufExplBuffersNeeded = 1
" let g:miniBufExplBRSplit = 0

" Remove trailing white space
autocmd BufWritePre * :%s/\(\S\)\s\+$/\1/e
                
command! CloseHiddenBuffers call s:CloseHiddenBuffers()
function! s:CloseHiddenBuffers()
  let open_buffers = []

  for i in range(tabpagenr('$'))
    call extend(open_buffers, tabpagebuflist(i + 1))
  endfor

  for num in range(1, bufnr("$") + 1)
    if buflisted(num) && index(open_buffers, num) == -1
      exec "bdelete ".num
    endif
  endfor
endfunction

"Notes
" let g:notes_directories = ['~/notes']
" let g:notes_suffix = '.txt'
" let g:notes_word_boundaries = 1
" let g:notes_smart_quotes = 0
set nocompatible
filetype plugin on       " may already be in your .vimrc

let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
augroup END
let g:goyo_width=120

" Wintabs
map <C-h> <Plug>(wintabs_previous)
map <C-l> <Plug>(wintabs_next)
map <C-T>c <Plug>(wintabs_close)
map <C-T>o <Plug>(wintabs_only)
map <C-W>c <Plug>(wintabs_close_window)
map <C-W>o <Plug>(wintabs_only_window)
command! Tabc WintabsCloseVimtab
command! Tabo WintabsOnlyVimtab
let g:wintabs_autoclose = 0

" Command-T
let g:CommandTCancelMap='<C-e>'

autocmd BufNewFile,BufRead *.slim setlocal filetype=slim

" Lua
let g:lua_complete_keywords = 0
let g:lua_complete_globals = 0
let g:lua_complete_library = 0
let g:lua_complete_dynamic = 0

" GUi
set guioptions-=m  "menu bar
set guioptions-=T  "toolbar
set guioptions-=r  "scrollbar"
