#!/usr/bin/env ruby

require 'trollop'

def check_code(result,message='')
  if $? != 0
    puts("#{message}(Error #{$?}) #{result}")
    exit
  end
end

$opts = Trollop::options do
  version "si-pull-request v3 (c) Search Influence"
  banner <<-EOS
This tool opens a pull request in github with a link to a trello card and
places a link to the pull request in the same card.

This command uses `hub` so understanding that command will help with using
this one. Leaving out the base and head options follows the normal SI workflow.

This command requires Trello api credentials to be set in your environment.
Information about this can be found here: 
https://github.com/jeremytregunna/ruby-trello

Gems:
    trollop ruby-trello highline

Usage:
    #{File.basename($0, File.extname($0))} [options] 
where [options] are:
EOS
  opt :base, 'The base of the pull request as: "branch", "owner:branch" or "owner/repo:branch". Default: branch in origin', type: :string
  opt :head, 'The head branch for the pull request:  "branch", "owner:branch", "owner/repo:branch"', type: :string
  opt :message, "The title and message of the pull request.", type: :string
  opt :open, "Open the pull request in the browser once done.", type: :boolean
end

Trollop::die 'Trello environment variables TRELLO_DEVELOPER_PUBLIC_KEY and TRELLO_MEMBER_TOKEN must be set.' if ENV['TRELLO_DEVELOPER_PUBLIC_KEY'].nil? || ENV['TRELLO_MEMBER_TOKEN'].nil?
Trollop::die 'Install the `hub` command.' unless system("which hub > /dev/null 2>&1")

if $opts[:message].nil?
  branch_name = (`git symbolic-ref --short HEAD`).gsub('-',' ').capitalize
  check_code(branch_name,"You must be in a git repo or provide a message.")
  message = branch_name
else
  message = $opts[:message]
end

#delay requiring these to speed up help
require 'trello'
require 'highline/import'

def choose_card(cards)
  chosen = nil
  say("Select a card to link:")
  choose do |menu|
    cards.each_with_index do |card,idx|
      menu.choice(card.name) do 
        chosen = [card]
      end
    end
  end
  chosen
end

def open_pull_request(message,cards)
  message = "#{message}\n\n#{cards.map{|c| c.short_url}.join("\n")}"
  base = $opts[:base] ? "-b '#{$opts[:base]}'" : ''
  head = $opts[:head] ? "-h '#{$opts[:head]}'" : ''
  open = $opts[:open] ? '-o' : ''
  result = `hub pull-request -m "#{message}" #{head} #{base} #{open}`
  check_code(result)
  result
end

def link_pull_request(cards,url)
  cards.each do |card|    
    if card.desc.present?
      desc_match = /\A(?<desc>.*?)\n*(__Pull Requests__\n*(?<pulls>.*))?\z/m.match(card.desc)
      description = desc_match[:desc] || ''
      pull_requests = desc_match[:pulls] || ''
      unless pull_requests.include?(url)
        pull_requests = "#{pull_requests}\n* #{url}"
      end
    else
      description = ''
      pull_requests = "* #{url}"
    end
    card.desc = "#{description}\n\n\n__Pull Requests__\n\n#{pull_requests}"    
    card.save
  end
end

Trello.configure do |config|
  config.developer_public_key = ENV['TRELLO_DEVELOPER_PUBLIC_KEY']
  config.member_token = ENV['TRELLO_MEMBER_TOKEN']
end

me = Trello::Member.find('me')

chosen_cards = choose_card(me.cards)
pull_request_url = open_pull_request(message,chosen_cards)
link_pull_request(chosen_cards,pull_request_url)

puts pull_request_url
