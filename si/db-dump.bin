#!/bin/bash

getopt --test > /dev/null
if [[ $? != 4 ]]; then
  echo "Iâ€™m sorry, `getopt --test` failed in this environment."
  exit 1
fi

show_help() {
cat << EOF
Usage: ${0##*/} [OPTIONS] <schema>
Dump the schema to the disk.

  -h | --host     Host to connect to a request a dump from.
  -o | --ouput    The name of the file to store the dump.
  -u | --user
EOF
}

short_opts=h:o:u:v

long_opts=host:,output:,user:,verbose

parsed=`getopt --options $short_opts --longoptions $long_opts --name "$0" -- $@`

if [[ $? != 0 ]]; then
  exit 2
fi

eval set -- $parsed

while true; do
  case "$1" in
    -h|--host)
      host="$2"
      shift 2
      ;;
    -o|--output)
      output="$2"
      shift 2
      ;;
    -u|--user)
      user="$2"
      shift 2
      ;;
    -v|--verbose)
      verbose=y
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "Unknown option $1"
      show_help
      exit 3
      ;;
  esac
done

timestamp=`date +"%Y-%m-%d_%H:%M:%S"`

default_output="$1-production-$timestamp.dump"

host="${host:-rds}"
output="${output:-$default_output}"
user="${user:-administrator}"

if [ -z "$1" ]; then
  echo "Must supply a user"
  usage $0
  exit 1
fi

if [ -z "$2" ]; then
  echo "Must supply a schema"
  usage $0
  exit 1
fi

user="$1"
schema="$2"
timestamp=`date +"%Y%m%d%H%M%S"`

dump="${schema}-production-${timestamp}.dump"

echo "Dumping schema $schema as $user"
if ! pg_dump -h rds -U $user -n $schema -F d -f $dump -j 2 searchinfluence; then
  echo "PG Dump failed"
  exit 1
fi

echo "Truncating data from schema $schema"
psql -h rds-staging -U administrator -d searchinfluence -c "select utils.truncate_schema('$schema')" > /dev/null

echo "Restoring data to schema $schema as $user"
pg_restore -h rds-staging -U $user -n $schema -j 2 --data-only -d searchinfluence $dump

rm -rf $dump
